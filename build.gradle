plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java-test-fixtures'
    id 'jacoco'
}

group = 'com.flab'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'it.ozimov:embedded-redis:0.7.2'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // FCM
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // test
    testImplementation('com.google.code.gson:gson:2.10.1')

    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'
    testFixturesImplementation('com.github.javafaker:javafaker:1.0.2') { exclude module: 'snakeyaml' }
    testFixturesImplementation group: 'org.yaml', name: 'snakeyaml', version: '2.2'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/*Application*'
                            , 'com/flab/readnshare/global/**/*'
                            , '**/dto/**/*'
                            , '**/exception/**/*'
                    ])
                })
        )
    }
}

jacoco {
    toolVersion = "0.8.12"
}
